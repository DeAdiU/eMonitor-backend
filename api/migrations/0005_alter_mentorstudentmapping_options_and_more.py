# Generated by Django 5.1.7 on 2025-04-09 19:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0004_alter_platformprofile_platform'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='mentorstudentmapping',
            options={'verbose_name': 'Mentor-Student Mapping', 'verbose_name_plural': 'Mentor-Student Mappings'},
        ),
        migrations.AlterModelOptions(
            name='platformprofile',
            options={'verbose_name': 'Platform Profile', 'verbose_name_plural': 'Platform Profiles'},
        ),
        migrations.AlterField(
            model_name='mentorstudentmapping',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='mentored_students_mapping', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='mentorstudentmapping',
            name='student',
            field=models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor_mappings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='platformprofile',
            name='is_verified',
            field=models.BooleanField(default=False, help_text='Indicates if the handle ownership is confirmed (future feature)'),
        ),
        migrations.AlterField(
            model_name='platformprofile',
            name='platform',
            field=models.CharField(choices=[('codeforces', 'Codeforces')], default='codeforces', max_length=20),
        ),
        migrations.AlterField(
            model_name='platformprofile',
            name='profile_id',
            field=models.CharField(help_text='Your Codeforces handle (case-sensitive)', max_length=100),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='platformprofile',
            unique_together={('user', 'platform')},
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('deadline', models.DateTimeField(help_text='The date and time by which the assessment must be completed.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_students', models.ManyToManyField(blank=True, limit_choices_to={'role': 'student'}, related_name='assigned_assessments', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-deadline', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest_id', models.IntegerField(help_text='Codeforces Contest ID (e.g., 1998)')),
                ('problem_index', models.CharField(help_text="Codeforces Problem Index (e.g., 'B', 'A1')", max_length=10)),
                ('title', models.CharField(blank=True, help_text='Problem title (fetched from Codeforces)', max_length=255, null=True)),
                ('link', models.URLField(blank=True, help_text='Direct link (auto-generated or fetched)', max_length=500, null=True)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags (fetched)', max_length=500, null=True)),
                ('rating', models.IntegerField(blank=True, help_text='Problem rating (fetched)', null=True)),
                ('points', models.PositiveIntegerField(default=100, help_text='Points awarded for a correct solution')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.assessment')),
            ],
            options={
                'verbose_name': 'Assessment Question',
                'verbose_name_plural': 'Assessment Questions',
                'ordering': ['assessment', 'id'],
                'unique_together': {('assessment', 'contest_id', 'problem_index')},
            },
        ),
        migrations.CreateModel(
            name='AssessmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('NOT_ATTEMPTED', 'Not Attempted'), ('PENDING_EVALUATION', 'Pending Evaluation'), ('EVALUATED', 'Evaluated'), ('ERROR', 'Evaluation Error')], default='NOT_ATTEMPTED', max_length=25)),
                ('evaluation_score', models.FloatField(blank=True, help_text='Score (0-100) from AI/fallback evaluation', null=True)),
                ('evaluation_feedback', models.TextField(blank=True, help_text='Feedback from AI/fallback evaluation', null=True)),
                ('codeforces_verdict', models.CharField(blank=True, help_text='Verdict from Codeforces (e.g., OK, WRONG_ANSWER)', max_length=50, null=True)),
                ('codeforces_submission_id', models.BigIntegerField(blank=True, help_text='ID of the evaluated Codeforces submission', null=True)),
                ('codeforces_passed_test_count', models.IntegerField(blank=True, help_text='Number of tests passed for the evaluated submission', null=True)),
                ('codeforces_time_consumed_millis', models.IntegerField(blank=True, null=True)),
                ('codeforces_memory_consumed_bytes', models.BigIntegerField(blank=True, null=True)),
                ('solved_at', models.DateTimeField(blank=True, help_text="Timestamp when the question was successfully solved (verdict='OK')", null=True)),
                ('last_checked_at', models.DateTimeField(blank=True, help_text='Timestamp when the backend last checked/updated this status', null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.assessment')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_submissions', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.question')),
            ],
            options={
                'verbose_name': 'Assessment Submission Status',
                'verbose_name_plural': 'Assessment Submission Statuses',
                'ordering': ['assessment', 'student', 'question'],
                'unique_together': {('student', 'question')},
            },
        ),
    ]
